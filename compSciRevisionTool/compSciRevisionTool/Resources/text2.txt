the 3 digit number indiacates pairing; the first letter is the type; the second letter indicates the subtype; thereafter is the data/filepath
000.th Infix to Postfix (RPN)
001.ts We can convert an infix expression to postfix by using a stack
002.ts Infix:   ( 4 + 2 ) * 3 ^ 4
002.ts Postfix: 4 2 + 3 4 ^ *
003.ts You should know that there is a priority to different operators...
004.ts 1. ^
004.ts 2. *  /
004.ts 3. +  -
005.ts We check through the infix expression item by item. When we come accross a number we add it stright to the new postfix/ RPN expression, but if we come accross an operator (incuding brackets), we deal with it through the use of a stack.
006.ii _2LRPN00
008.ii _2LRPN01
008.ts The first item is an open bracket ( which is an operator, so we add it to the stack
010.ii _2LRPN02
010.ts The next item is the number 4, so it is added straight to the new postfix expression
013.ii _2LRPN03
013.ts Next is the + operator, so it is added to the stack
014.ii _2LRPN04
014.ts The next item is the number 2, so it is added straight to the new postfix expression
016.ii _2LRPN05
016.ts The next item is the close bracket ), so it is added to the stack
018.ii _2LRPN06
018.ts When a close bracket is pushed to a stack, everything before it up to the open bracket is popped and added to the postfix expression. So, here the + is enclosed by the brackets and is popped, then adde to the postfix expression
020.ii _2LRPN07
020.ts * is an operator, so is pushed to the stack
022.ii _2LRPN08
022.ts 3 is a operand, so is added to the postfix expression
024.ii _2LRPN09
024.ts ^ is an operator and is pushed to the stack. We must consider what is before it... ^ is higher priority than *, so it can be added straight to the stack
025.ii _2LRPN10
025.ts 4 is an operand and is added straight to the postfix expression
026.ii _2LRPN11
026.ts Once the entire expression has been checked, we then pop everything from the stack one by one
028.ii _2LRPN12